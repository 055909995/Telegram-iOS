{"v":"5.0.6","fr":60,"ip":1,"op":62,"w":200,"h":200,"nm":"star jumps","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[100,100,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[400,400,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.083,-0.067],[-0.067,2.085],[2.085,0.067],[0.068,-2.084]],"o":[[2.084,0.068],[0.067,-2.084],[-2.083,-0.068],[-0.067,2.085]],"v":[[-0.123,3.772],[3.774,0.12],[0.122,-3.773],[-3.774,-0.124]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,-14.438],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"head","np":2,"cix":2,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":120,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":150,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"t":180}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-2.188,-6.875],"ix":2},"a":{"a":0,"k":[-2.188,-9.875],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":120,"s":[-90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":150,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":156,"s":[0],"e":[-90]},{"t":180}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm left","np":2,"cix":2,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":120,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":150,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"t":180}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[2,-6.969],"ix":2},"a":{"a":0,"k":[2,-9.969],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":120,"s":[90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":150,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":156,"s":[0],"e":[90]},{"t":180}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm right","np":2,"cix":2,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":144,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":156,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}]},{"t":180}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":120,"s":[-30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":150,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":156,"s":[0],"e":[-30]},{"t":180}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg left","np":2,"cix":2,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":144,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":156,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}]},{"t":180}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":120,"s":[30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":150,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":156,"s":[0],"e":[30]},{"t":180}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            2,\n            3,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg right","np":2,"cix":2,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.551,0.153],[0,0],[0,0],[-3.568,0.081],[0,0],[0,0]],"o":[[-0.548,0.165],[0,0],[0,0],[0,0],[3.568,-0.081],[0,0],[0.001,-0.048]],"v":[[1.526,-11.742],[-1.779,-11.724],[-3.864,-8.282],[-3.606,0.078],[-0.006,4.393],[3.587,0.078],[4.117,-8.282]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"body","np":3,"cix":2,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":120,"op":180,"st":120,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[100,100,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[400,400,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.083,-0.067],[-0.067,2.085],[2.085,0.067],[0.068,-2.084]],"o":[[2.084,0.068],[0.067,-2.084],[-2.083,-0.068],[-0.067,2.085]],"v":[[-0.123,3.772],[3.774,0.12],[0.122,-3.773],[-3.774,-0.124]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,-14.438],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"head","np":2,"cix":2,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":60,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":90,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"t":120}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-2.188,-6.875],"ix":2},"a":{"a":0,"k":[-2.188,-9.875],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":60,"s":[-90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":90,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":96,"s":[0],"e":[-90]},{"t":120}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm left","np":2,"cix":2,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":60,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":90,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"t":120}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[2,-6.969],"ix":2},"a":{"a":0,"k":[2,-9.969],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":60,"s":[90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":90,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":96,"s":[0],"e":[90]},{"t":120}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm right","np":2,"cix":2,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":84,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":96,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}]},{"t":120}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":60,"s":[-30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":90,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":96,"s":[0],"e":[-30]},{"t":120}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg left","np":2,"cix":2,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":84,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":96,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}]},{"t":120}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":60,"s":[30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":90,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":96,"s":[0],"e":[30]},{"t":120}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            2,\n            3,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg right","np":2,"cix":2,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.551,0.153],[0,0],[0,0],[-3.568,0.081],[0,0],[0,0]],"o":[[-0.548,0.165],[0,0],[0,0],[0,0],[3.568,-0.081],[0,0],[0.001,-0.048]],"v":[[1.526,-11.742],[-1.779,-11.724],[-3.864,-8.282],[-3.606,0.078],[-0.006,4.393],[3.587,0.078],[4.117,-8.282]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"body","np":3,"cix":2,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":60,"op":120,"st":60,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[100,100,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[400,400,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.083,-0.067],[-0.067,2.085],[2.085,0.067],[0.068,-2.084]],"o":[[2.084,0.068],[0.067,-2.084],[-2.083,-0.068],[-0.067,2.085]],"v":[[-0.123,3.772],[3.774,0.12],[0.122,-3.773],[-3.774,-0.124]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,-14.438],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"head","np":2,"cix":2,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":0,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":30,"s":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-11.599,-16.915],[-13.29,-16.358],[-12.733,-14.666],[-8.351,-10.775],[-3.864,-8.282]],"c":true}],"e":[{"i":[[0.717,2.38],[0,0],[0,0],[0.313,-0.621],[-0.53,-0.458],[0,0],[-0.011,0.063]],"o":[[0,0],[0,0],[-0.545,-0.365],[-0.314,0.621],[0,0],[0,0],[2.396,0.532]],"v":[[-0.717,-11.599],[-7.06,-13.364],[-13.286,-13.415],[-14.978,-12.858],[-14.421,-11.166],[-8.351,-10.775],[-3.864,-8.282]],"c":true}]},{"t":60}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-2.188,-6.875],"ix":2},"a":{"a":0,"k":[-2.188,-9.875],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[-90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":30,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":36,"s":[0],"e":[-90]},{"t":60}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm left","np":2,"cix":2,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":0,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":30,"s":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[12.733,-14.666],[13.29,-16.358],[11.599,-16.915],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}],"e":[{"i":[[0,0],[0,0],[0.314,0.621],[0.573,-0.371],[0,0],[-0.026,0.054],[-2.461,0.5]],"o":[[0,0],[0.607,-0.463],[-0.313,-0.621],[0,0],[0,0],[-1.183,2.773],[0.008,0]],"v":[[8.035,-10.775],[13.921,-11.416],[14.478,-13.108],[12.786,-13.665],[6.745,-13.364],[0.964,-11.617],[4.117,-8.282]],"c":true}]},{"t":60}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[2,-6.969],"ix":2},"a":{"a":0,"k":[2,-9.969],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[90],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":30,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":36,"s":[0],"e":[90]},{"t":60}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"arm right","np":2,"cix":2,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":24,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":36,"s":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.297,6.224],[-12.443,12.673],[-12.148,14.513],[-11.974,14.621],[-10.309,14.219],[-6.026,7.497],[-0.006,4.393]],"c":true}],"e":[{"i":[[3.419,-0.047],[0,0],[0,0],[-0.589,-0.426],[-0.061,-0.031],[-0.387,0.532],[0,0],[0.006,-0.049]],"o":[[0.013,-0.047],[0,0],[-0.427,0.589],[0.056,0.041],[0.568,0.29],[0,0],[0,0],[0.975,-3.393]],"v":[[-3.606,0.078],[-9.234,8.474],[-12.881,15.048],[-12.586,16.888],[-12.411,16.996],[-10.746,16.594],[-5.964,9.747],[-0.006,4.393]],"c":true}]},{"t":60}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[-30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":30,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":36,"s":[0],"e":[-30]},{"t":60}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg left","np":2,"cix":2,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":24,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"n":"0p833_0p833_0p167_0p167","t":36,"s":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[6.345,7.764],[10.36,14.219],[12.024,14.621],[12.199,14.513],[12.494,12.673],[9.415,6.441],[3.587,0.078]],"c":true}],"e":[{"i":[[-1.494,-2.799],[0,0],[0,0],[-0.568,0.29],[-0.056,0.041],[0.427,0.589],[0,0],[0.007,0.016]],"o":[[-0.025,-0.018],[0,0],[0.385,0.532],[0.061,-0.031],[0.589,-0.426],[0,0],[0,0],[-3.118,-0.234]],"v":[[-0.006,4.393],[5.97,9.514],[10.735,16.594],[12.399,16.996],[12.574,16.888],[12.869,15.048],[9.04,8.191],[3.587,0.078]],"c":true}]},{"t":60}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[30],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":30,"s":[0],"e":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":36,"s":[0],"e":[30]},{"t":60}],"ix":6,"x":"var $bm_rt;\nvar easingPreset = [\n        [\n            3,\n            4,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            1,\n            2,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ],\n        [\n            2,\n            3,\n            [\n                'make_bezier_easing',\n                [\n                    0.25,\n                    0.46,\n                    0.45,\n                    1\n                ],\n                'Glide.Out',\n                false\n            ]\n        ]\n    ];\nfunction easingMaker() {\n    var t, d, newProgress, sX, eX, sY, eY, sZ, eZ, val1;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key(sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1];\n        dim = 2;\n        key(1)[2];\n        dim = 3;\n    } catch (e) {\n    }\n    var expression = null;\n    for (var i = 0; i < easingPreset.length; ++i) {\n        if (easingPreset[i][0] <= n && easingPreset[i][1] >= n + 1) {\n            var expression = eval([easingPreset[i][2][0]][0]);\n            try {\n                expression = expression.apply({}, easingPreset[i][2][1].concat(easingPreset[i][2][3]));\n            } catch (e) {\n                expression = expression.apply({}, easingPreset[i][2][1]);\n            }\n            break;\n        }\n    }\n    if (!expression)\n        return null;\n    t = sub(time, key1.time);\n    d = sub(key2.time, key1.time);\n    if (expression.hasOwnProperty('curviosity') && expression.curviosity) {\n        newProgress = expression.executeProgress(div(t, d));\n        return thisProperty.valueAtTime(sum(key1.time, mul(d, newProgress)));\n    }\n    sX = key1[0];\n    eX = sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = expression.execute(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n        case 2:\n            val2 = expression.execute(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n        case 3:\n            val2 = expression.execute(t, sY, eY, d);\n            val3 = expression.execute(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easingMaker() || value;\nfunction sampleCurveY(t) {\n    return mul(sum(mul(sum(mul(this.ay, t), this.by), t), this.cy), t);\n}\nfunction sampleCurveX(t) {\n    return mul(sum(mul(sum(mul(this.ax, t), this.bx), t), this.cx), t);\n}\nfunction sampleCurveDerivativeX(t) {\n    return sum(mul(sum(mul(mul(3, this.ax), t), mul(2, this.bx)), t), this.cx);\n}\nfunction solveCurveX(x, epsilon) {\n    var t2, i, x2, d2, t0, t1;\n    for (t2 = x, i = 0; i < 8; i++) {\n        x2 = sub(sampleCurveX.call(this, t2), x);\n        if (Math.abs(x2) < epsilon)\n            return t2;\n        d2 = sampleCurveDerivativeX.call(this, t2);\n        if (Math.abs(d2) < 0.000001)\n            break;\n        t2 = sub(t2, div(x2, d2));\n    }\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n    if (t2 < t0)\n        return t0;\n    if (t2 > t1)\n        return t1;\n    while (t0 < t1) {\n        x2 = sampleCurveX.call(this, t2);\n        if (Math.abs(x2 - x) < epsilon)\n            return t2;\n        if (x > x2)\n            t0 = t2;\n        else\n            t1 = t2;\n        t2 = sum(mul(sub(t1, t0), 0.5), t0);\n    }\n    return t2;\n}\nfunction executeBezier(t, b, e, d) {\n    return sum(b, mul(e, sampleCurveY.call(this, solveCurveX.call(this, div(t, d), div(1, mul(200, d))))));\n}\nfunction executeBezierProgress(oldProgress) {\n    return sampleCurveY.call(this, solveCurveX.call(this, oldProgress, 1 / 200));\n}\nfunction make_bezier_easing(p1x, p1y, p2x, p2y, curviosity) {\n    this.cx = mul(3, p1x);\n    this.bx = sub(mul(3, sub(p2x, p1x)), this.cx);\n    this.ax = sub(sub(1, this.cx), this.bx);\n    this.cy = mul(3, p1y);\n    this.by = sub(mul(3, sub(p2y, p1y)), this.cy);\n    this.ay = sub(sub(1, this.cy), this.by);\n    this.curviosity = curviosity;\n    this.execute = executeBezier;\n    this.executeProgress = executeBezierProgress;\n    return this;\n}\nfunction executeElasticIn(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum($bm_neg(mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n}\nfunction executeElasticOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    return sum(sum(mul(mul(a, Math.pow(2, mul(-10, t))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), c), b);\n}\nfunction executeElasticInOut(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return sum(b, c);\n    if (!p)\n        p = mul(d, 0.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = div(p, 4);\n    } else\n        s = mul(div(p, mul(2, Math.PI)), Math.asin(1));\n    if (t < 1)\n        return sum(mul(-0.5, mul(mul(a, Math.pow(2, mul(10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p)))), b);\n    return sum(sum(mul(mul(mul(a, Math.pow(2, mul(-10, t -= 1))), Math.sin(div(mul(sub(mul(t, d), s), mul(2, Math.PI)), p))), 0.5), c), b);\n}\nfunction executeElasticInProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : -Math.pow(2, 10 * Progress - 10) * Math.sin((Progress * 10 - 10.75) * (2 * Math.PI / 3));\n}\nfunction executeElasticOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Math.pow(2, -10 * Progress) * Math.sin((Progress * 10 - 0.75) * (2 * Math.PI / 3)) + 1;\n}\nfunction executeElasticInOutProgress(Progress) {\n    return Progress === 0 ? 0 : Progress === 1 ? 1 : Progress < 0.5 ? -(Math.pow(2, 20 * Progress - 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5))) / 2 : Math.pow(2, -20 * Progress + 10) * Math.sin((20 * Progress - 11.125) * (2 * Math.PI / 4.5)) / 2 + 1;\n}\nfunction make_elastic_easing_in(curviosity) {\n    this.execute = executeElasticIn;\n    this.executeProgress = executeElasticInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_out(curviosity) {\n    this.execute = executeElasticOut;\n    this.executeProgress = executeElasticOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_elastic_easing_in_out(curviosity) {\n    this.execute = executeElasticInOut;\n    this.executeProgress = executeElasticInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction executeBounceIn(t, b, c, d) {\n    return sum(sub(c, executeBounceOut(sub(d, t), 0, c, d)), b);\n}\nfunction executeBounceOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return sum(mul(c, mul(mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return sum(mul(c, sum(mul(mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction executeBounceInOut(t, b, c, d) {\n    if (t < d / 2)\n        return sum(mul(executeBounceIn(mul(t, 2), 0, c, d), 0.5), b);\n    return sum(sum(mul(executeBounceOut(sub(mul(t, 2), d), 0, c, d), 0.5), mul(c, 0.5)), b);\n}\nfunction executeBounceInProgress(oldProgress) {\n    return sub(1, executeBounceOut(sub(1, oldProgress)));\n}\nfunction executeBounceOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2.75) {\n        return mul(mul(7.5625, oldProgress), oldProgress);\n    } else if (oldProgress < 2 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 1.5 / 2.75), oldProgress), 0.75);\n    } else if (oldProgress < 2.5 / 2.75) {\n        return sum(mul(mul(7.5625, oldProgress -= 2.25 / 2.75), oldProgress), 0.9375);\n    } else {\n        return sum(mul(mul(7.5625, oldProgress -= 2.625 / 2.75), oldProgress), 0.984375);\n    }\n}\nfunction executeBounceInOutProgress(oldProgress) {\n    if (oldProgress < 1 / 2)\n        return mul(executeBounceIn(mul(oldProgress, 2)), 0.5);\n    return sum(mul(executeBounceOut(sub(mul(oldProgress, 2), 1)), 0.5), 0.5);\n}\nfunction make_bounce_easing_in(curviosity) {\n    this.execute = executeBounceIn;\n    this.executeProgress = executeBounceInProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_out(curviosity) {\n    this.execute = executeBounceOut;\n    this.executeProgress = executeBounceOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}\nfunction make_bounce_easing_in_out(curviosity) {\n    this.execute = executeBounceInOut;\n    this.executeProgress = executeBounceInOutProgress;\n    this.curviosity = curviosity;\n    return this;\n}"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"leg right","np":2,"cix":2,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.551,0.153],[0,0],[0,0],[-3.568,0.081],[0,0],[0,0]],"o":[[-0.548,0.165],[0,0],[0,0],[0,0],[3.568,-0.081],[0,0],[0.001,-0.048]],"v":[[1.526,-11.742],[-1.779,-11.724],[-3.864,-8.282],[-3.606,0.078],[-0.006,4.393],[3.587,0.078],[4.117,-8.282]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"body","np":3,"cix":2,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":60,"st":0,"bm":0}],"markers":[]}